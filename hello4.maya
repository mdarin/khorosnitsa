# Гошные варианты нравятся и подходят если не рассматривать эрланг и эликсир
#func Function_name(arg1, arg2) retval {
#func Function_name() {
#    retval = 1 * 2
#}
# -------
# Parallel World Levithan
# -------

# Подпрограммы (routines)
# пока ещё в сыром виде

func :addition() {
    1 + 1 # в стеке 2
    retval = (2 + 2) * (1 + 1) 
    if (retval < 9) {
        print retval
    }
    # retval # в стеке 8
    # если выражения нет в конце функции то в стеке ничего не остаётся!
    # это можно организовать например присвоение результат какой-либо перемоенной(и сохранение его в памяти)
}

# пока аргументы это глобальные переменные и их надо определить перед вызовом функции, такая эрзац передача по ссылке
# здесь можно задать переменные которые использутся в функции
# в нашем случае это retval например
#:addition()
# дальше переменные модифицированные функцией можно использовать в программе
#print retval # даже если функция не оставила этого значения в стеке, оно есть в памяти




# Рекурсия и циклы на её основе

res = 0 # до объявления функции в переменной явно 0
func :loop() {
    # если переменная не объявлена она = 0 
    if ( res < 3) {
        res = res + 1
        t = :loop()
        print t
    }
    res
}
#res + 7 # = 7 прибаляем к результату число чтобы убедится что определение функции не повлияло на состояние
#t2 = :loop()
#t2 + 17 # = 20 
#res + 7 # = 10 <- будет вершина стека


###
# Факторил на хвостовой рекурсии
#

# n1 и p1 это по сути аргументы функции, но сейчас это просто глобальные переменные, 
# все переменные по умолчанию равны 0 поэтому их можно не объявлять заранее
# переменные пока лучше объявлять прямо перед вызовом функции, вроде как аргументы передаются в неё
func :factorial_1() {
  if (n1 < 2) {
      p1
  } else {
      p1 = p1 * n1
      n1 = n1 - 1
      :factorial_1()
  }
}

# Контрольные примеры факториалов 
#
# Число	Факториал числа (n!)
# 0	    1
# 1	    1
# 2	    2
# 3	    6
# 4	    24
# 5	    120
# 6	    720
# 7	    5040
# 8	    40320
# 9	    362880
# 10    3628800
# Факториал 20: 2432902008176640000
# Факториал 30: 265252859812191058636308480000000
# Факториал 100: 933262154439441526816992388562667004907159682643816214685929
# 638952175999932299156089414639761565182862536979208272237582
# 51185210916864000000000000000000000000
func :factorial() {
  n1 = n
  p1 = 1
  :factorial_1()
}

n = 0 
:factorial()


# Взгляд в перспективу
# TODO: 
# 1. дальнейшие доработки в направлении пространств имён и аргументов функций
# 2. именование функций и переменных
# 3. программный паттерн GenServer уровня сервиса(набор команд и обработчиков для них + инструментарий для бизнес логики)
# 4. типы данных
# 5. язык выбоать(способ токенизации)
# 6. Как сага на языке высокого уровня ложится на сагу - сервис?
