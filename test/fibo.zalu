# Вычисление чисел Фибоначчи
# Решение быстрым возведением матрицы в степень
# Функция возвращает n-е число Фибоначчи

func fibo(n) {
    a = 1; b = 1 
    c = 1; d = 0
    ta = 0; tb = 0; tc = 0
    rc = 0; rd = 1

     while (n > 0) {
        # Если степень нечетная
         #t = n rem 2  как альтернатива
         t = n band 1
         if (t /= 0) {
             # Умножаем вектор R на матрицу A 
             tc = rc
             rc = rc*a + rd*c
             rd = tc*b + rd*d
         }
 
         # Умножаем матрицу A на саму себя
         ta = a; tb = b; tc = c
         a = a*a  + b*c
         b = ta*b + b*d
         c = c*ta + d*c     
         d = tc*tb+ d*d
 
         # Уменьшаем степень вдвое
         n = n bsr 1 
     }
 
    # вернуть значение(оставить на вершине стека)
    rd # rc в оригинальной статье именно это возвращалось, rc содержит следующее число от заказанного
}

# №	число Фибоначчи
# 1 	0
# 2 	1
# 3 	1
# 4 	2
# 5 	3
# 6 	5
# 7 	8
# 8 	13
# 9	    21
# 10	34
# 11	55
# 12	89
# 100   218922995834555169026
# 145   555565404224292694404015791808
fibo(1)
fibo(2)
fibo(3)
fibo(4)
fibo(5)
fibo(6)
fibo(7)
fibo(8)
fibo(9)
fibo(10)
fibo(11)
fibo(12)
